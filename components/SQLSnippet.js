export const sql = `--
-- Create tables
--

CREATE TABLE public.squeak_config (
    id bigint NOT NULL,
    preflight_complete boolean DEFAULT false NOT NULL,
    slack_api_key text,
    slack_question_channel text,
    slack_signing_secret text,
    mailgun_api_key text,
    mailgun_domain text
);

ALTER TABLE public.squeak_config ALTER COLUMN id ADD GENERATED BY DEFAULT AS IDENTITY (
    SEQUENCE NAME public.squeak_config_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1
);

CREATE TABLE public.squeak_messages (
    id bigint NOT NULL,
    created_at timestamp with time zone DEFAULT now(),
    subject text,
    slug text[],
    published boolean DEFAULT false NOT NULL,
    slack_timestamp text,
    profile_id uuid
);

ALTER TABLE public.squeak_messages ALTER COLUMN id ADD GENERATED BY DEFAULT AS IDENTITY (
    SEQUENCE NAME public.squeak_messages_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1
);

CREATE TABLE public.squeak_profiles (
    id uuid NOT NULL,
    first_name text,
    last_name text,
    avatar text
);

CREATE TABLE public.squeak_profiles_readonly (
    id uuid NOT NULL,
    role text DEFAULT 'user'::text NOT NULL
);

CREATE VIEW public.squeak_profiles_view AS
 SELECT squeak_profiles.id,
    squeak_profiles.first_name,
    squeak_profiles.last_name,
    squeak_profiles.avatar,
    squeak_profiles_readonly.role
   FROM (public.squeak_profiles
     JOIN public.squeak_profiles_readonly ON ((squeak_profiles.id = squeak_profiles_readonly.id)));

CREATE TABLE public.squeak_replies (
    id bigint NOT NULL,
    created_at timestamp with time zone DEFAULT now(),
    body text,
    message_id bigint,
    profile_id uuid
);

ALTER TABLE public.squeak_replies ALTER COLUMN id ADD GENERATED BY DEFAULT AS IDENTITY (
    SEQUENCE NAME public.squeak_replies_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1
);

--
-- Populate config table
--

INSERT INTO squeak_config(id, preflight_complete) VALUES (1, false);

--
-- Create relations
--

ALTER TABLE ONLY public.squeak_config
    ADD CONSTRAINT squeak_config_pkey PRIMARY KEY (id);

ALTER TABLE ONLY public.squeak_messages
    ADD CONSTRAINT squeak_messages_pkey PRIMARY KEY (id);

ALTER TABLE ONLY public.squeak_profiles
    ADD CONSTRAINT squeak_profiles_pkey PRIMARY KEY (id);

ALTER TABLE ONLY public.squeak_profiles_readonly
    ADD CONSTRAINT squeak_profiles_readonly_pkey PRIMARY KEY (id);

ALTER TABLE ONLY public.squeak_replies
    ADD CONSTRAINT squeak_replies_pkey PRIMARY KEY (id);
    
ALTER TABLE ONLY public.squeak_messages
    ADD CONSTRAINT messages_profile_id_fkey FOREIGN KEY (profile_id) REFERENCES public.squeak_profiles(id);

ALTER TABLE ONLY public.squeak_profiles
    ADD CONSTRAINT profiles_id_fkey FOREIGN KEY (id) REFERENCES auth.users(id);

ALTER TABLE ONLY public.squeak_profiles_readonly
    ADD CONSTRAINT profiles_readonly_id_fkey FOREIGN KEY (id) REFERENCES auth.users(id);

ALTER TABLE ONLY public.squeak_replies
    ADD CONSTRAINT replies_message_id_fkey FOREIGN KEY (message_id) REFERENCES public.squeak_messages(id);

ALTER TABLE ONLY public.squeak_replies
    ADD CONSTRAINT replies_profile_id_fkey FOREIGN KEY (profile_id) REFERENCES public.squeak_profiles(id);

--
-- Create functions
--

CREATE FUNCTION public.get_is_admin() RETURNS boolean
    LANGUAGE sql SECURITY DEFINER
    SET search_path TO 'public'
    AS $$
        SELECT CASE WHEN role = 'admin' THEN true ELSE false END
        FROM squeak_profiles_readonly
        WHERE id = auth.uid()
    $$;

CREATE FUNCTION public.handle_new_user() RETURNS trigger
    LANGUAGE plpgsql SECURITY DEFINER
    SET search_path TO 'public'
    AS $$
    BEGIN
        INSERT INTO squeak_profiles (id)
        VALUES (new.id);
                
        INSERT INTO squeak_profiles_readonly (id, role)
        VALUES (new.id, (SELECT CASE WHEN preflight_complete THEN 'user' ELSE 'admin' END from squeak_config));
        
        RETURN new;
    END;
    $$;

--
-- Create triggers
--

CREATE TRIGGER on_auth_user_created AFTER INSERT ON auth.users FOR EACH ROW EXECUTE FUNCTION public.handle_new_user();

--
-- Create policies
--

CREATE POLICY "Allow access to admins" ON public.squeak_config FOR SELECT USING (((auth.role() = 'authenticated'::text) AND public.get_is_admin()));

CREATE POLICY "Allow insert with matching ID" ON public.squeak_profiles FOR INSERT WITH CHECK ((auth.uid() = id));

CREATE POLICY "Allow update to admins" ON public.squeak_config FOR UPDATE USING (((auth.role() = 'authenticated'::text) AND public.get_is_admin()));

CREATE POLICY "Allow update with matching ID" ON public.squeak_profiles FOR UPDATE USING ((auth.uid() = id));

CREATE POLICY "Enable access to all users" ON public.squeak_messages FOR SELECT USING (true);

CREATE POLICY "Enable access to all users" ON public.squeak_profiles FOR SELECT USING (true);

CREATE POLICY "Enable access to all users" ON public.squeak_profiles_readonly FOR SELECT USING (true);

CREATE POLICY "Allow update to admins" ON public.squeak_profiles_readonly FOR UPDATE USING (((auth.role() = 'authenticated'::text) AND (auth.uid() <> id) AND public.get_is_admin()));

CREATE POLICY "Enable access to all users" ON public.squeak_replies FOR SELECT USING (true);

CREATE POLICY "Enable insert access to all users" ON public.squeak_messages FOR INSERT WITH CHECK (true);

CREATE POLICY "Enable insert access to all users" ON public.squeak_replies FOR INSERT WITH CHECK (true);

--
-- Enable row level security
--

ALTER TABLE public.squeak_config ENABLE ROW LEVEL SECURITY;

ALTER TABLE public.squeak_messages ENABLE ROW LEVEL SECURITY;

ALTER TABLE public.squeak_profiles ENABLE ROW LEVEL SECURITY;

ALTER TABLE public.squeak_profiles_readonly ENABLE ROW LEVEL SECURITY;

ALTER TABLE public.squeak_replies ENABLE ROW LEVEL SECURITY;`
